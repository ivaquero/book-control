#import "lib/sci-book.typ": *
#show: doc => conf(
  title: "线性二次型调节器",
  author: ("ivaquero"),
  header-cap: "现代控制理论",
  footer-cap: "github@ivaquero",
  outline-on: false,
  doc,
)

= 一维动态规划

== 简单系统

考虑系统

$ x_([k+1]) = x_([k]) + u_([k]) $

其中

- 初始值：$x[0]=1$
- 目标值：$x[d]=0$
- 末端：$N=2$

于是，其代价函数可定义为

$
  J = 1 / 2 underbrace(x^2[w], "末端代价") + 1 / 2 ∑_(k=0)^(N-1)(
    underbrace(x^2_([k]),"运行代价") + underbrace(u^2_([k]), "输入代价")
  )
$

== 极端策略

#block(
  height: 11em,
  columns()[
    - 策略1：一步到位
      - 输入代价
        - $u[0] = -1$
        - $u[1] = 0$
      - 最终代价
        - $x[1] = 0, x[2] = 0$
        - $J = 1$
    - 策略2：两步走
      - 输入代价
        - $u[0] = -0.5$
        - $u[1] = -0.5$
      - 最终代价
        - $x[1] = 0.5, x[2] = 0$
        - $J = 0.875$
  ],
)

== 最优策略

即，求$u^*[0], u^*[1]$，使$J$最小，采用逆向分级方法

- $k = 1→2$

$
  J_(1→2) &= 1 / 2 x^2[2] + 1 / 2 x^2[1] + 1 / 2 u^2[1]\
  &= 1 / 2 (x[1] + u[1])^2 + 1 / 2 x^2[1] + 1 / 2 u^2[1]
$

求导得

$ pdv(J_(1→2),u[1]) = x[1] + u[1] + u[1] = 0 $

有

$ u^*[1] = -1 / 2 x[1] $

于是

$ J^*_(1→2) = 3 / 4 x^2[1] $

进而得

$ J_(0→2) = J_(1→2) + 1 / 2(x^2[0] + u^2[0]) $

根据 Bellman 最优理论，若$J_(0→2)$最小，则子项$J_(1→2)$此时必为 最小。代入$J^*_(1→2)$和$x[1]$，可得

$ J_(0→2) = 3 / 4 (x[0] + u[0])^2 + 1 / 2 (x^2[0] + u^2[0]) $

求导得

$ pdv(J_(0→2),u[0]) = 3 / 2 (x[0] + u[0]) + u[0] = 0 $

此时

$ u^*[0] = -3 / 5 x[0] $

回代得

$ x[0] = 2 / 5, x[1] = 1 / 5 $

最终得

$ J_(min) = 0.8 $

= 线性二次型调节器

== 线性系统

对离散线性系统

$ 𝒙_([k+1]) = 𝑨 𝒙_([k]) + 𝑩 𝒖_([k]) $ <sys>

其代价函数可化为二次型

$
  J &= 1 / 2 underbrace((𝒙_([N]) - 𝒙_d_([N]))^(⊤) 𝑺(𝒙_([N]) - 𝒙[d]), "末端代价") \
  &+1 / 2∑_(k=0)^(N-1) (underbrace((𝒙_([N]) - 𝒙[d])^(⊤) 𝑸 (𝒙_([N]) - 𝒙[d])^(⊤), "运行代价") + 𝒖^(⊤)_([k]) 𝑹 𝒖_([k]))
$

调节目标

$ 𝒙_d = 𝟎 = vec(delim: "[", 0, 0, ⋮,0) $

则

$ J = 1 / 2 𝒙_([N])^(⊤) 𝑺 𝒙_([N]) + 1 / 2 ∑_k^(N-1) (𝒙_([k])^(⊤) 𝑸 𝒙_([k]) + 𝒖^(⊤)_([k]) 𝑹 𝒖_([k])) $

这就得到了一个 LQR（linear quadratic regulator）问题。此时，$𝑺, 𝑸$为半正定对角阵，$𝑹$为正定对角阵。

#pagebreak(weak: true)

== 逆向分级

$k = N$时

$ J_(N→N) = 1 / 2 𝒙_([N])^(⊤) 𝑺 𝒙_([N]) $

此时$J$为最优末端代价，因为此时无法再产生变化。令$𝑺 = P_([0])$，即

$ J_(N→N) = 1 / 2 𝒙_([N])^(⊤) P_([0]) 𝒙_([N]) $

$k = N-1$时

$
  J_(N-1→N) &= 1 / 2 𝒙_([N])^(⊤) 𝑺 𝒙_([N]) + 1 / 2 𝒙_([N-1])^(⊤) 𝑸 𝒙_([N-1]) + 1 / 2 𝒖^(⊤)_([N-1]) 𝑹 𝒖_([N-1])\
  &= J_(N→N) + 1 / 2 𝒙_([N-1])^(⊤) 𝑸 𝒙_([N-1]) + 1 / 2 𝒖^(⊤)_([N-1]) 𝑹 𝒖_([N-1])
$

以此类推

$
  J_(N-2→N) = J_(N-1→N) + 1 / 2 𝒙_([N-2])^(⊤) 𝑸 𝒙_([N-2]) + 1 / 2 𝒖^(⊤)_([N-2]) 𝑹 𝒖_([N-2])
$

又由@sys，可得

$ 𝒙_([N]) = 𝑨 𝒙_([N-1]) + 𝑩 𝒖_([N-1]) $

于是，令一阶导数

$ pdv(J_(N-1→N), 𝒖_([N-1])) = 0 $

得

$
  𝒖^*_([N-1]) &= -(𝑩^⊤ P_([0])𝑩 + 𝑹)^(-1) 𝑩^⊤ P_([0]) 𝑨 𝒙_([N-1])\
  &= -underbrace(F_([N-1]), "feedback")underbrace(𝒙_([N-1]),"Gain")
$

又二阶导数

$ pdv(J_(N-1→N), 𝒖_([N-1]), 2) = underbrace((𝑩^⊤ P_([0])𝑩)^⊤, "≥0") + underbrace(𝑹^⊤, ">0") $

故$𝒖^*$为最小值。进一步得

$ J_(N-1→N) = 1 / 2 𝒙_([N-1])^(⊤) P_([1]) 𝒙_([N-1]) $

其中

$ P_([1]) = (𝑨 - 𝑩 F_([N-1]))^⊤ P_([0])(𝑨 - 𝑩 F_([N-1])) + F_([N-1])^⊤ 𝑹 F_([N-1]) + 𝑸 $

类推得

$ J_(N-k→N) = 1 / 2 𝒙_([N-1])^(⊤) P_([k]) 𝒙_([N-1]) $

其中

$
  cases(
    P_([k]) = (𝑨 - 𝑩 F_([N-k]))^⊤ P_([k-1])(𝑨 - 𝑩 F_([N-k])) + F_([N-k])^⊤ 𝑹 F_([N-k]) + 𝑸,
    F_([N-k]) = (𝑩^⊤ P_([0])𝑩 + 𝑹)^(-1) 𝑩^⊤ P_([k-1]) 𝑨,
    𝒖^*_([N-k]) = -F_([N-k]) 𝒙_([N-k])
)
$

= 轨迹追踪

== 弹簧振动阻尼系统

对弹簧振动阻尼系统

#figure(
  image("images/model/vibration.drawio.png", width: 40%),
  caption: "",
  supplement: [图],
)

- 当目标$𝒙_d = vec(delim: "[", 0, 0)$，为经典 LQR 问题
- 当目标$𝒙_d = vec(delim: "[", 1, 0)$或不为$𝟎$时，为轨迹追踪问题

若追踪目标为

$ 𝒙_(d[k+1]) = 𝑨_D 𝒙_(d[k]) $

设$𝒙_d$为常数向量，则令

$ 𝒆_([k]) = 𝒙_([k]) - 𝒙_(d[k]) = underbrace([𝑰 -𝑰], "𝑪ₐ") vec(delim: "[", 𝒙_([k]), 𝒙_(d[k])) $

此时，目标值$𝒆_(d[k]) = 0$，问题转化为 LQR 问题。于是有

$
  underbrace(vec(delim: "[", 𝒙_([k+1]), 𝒙_(d[k+1])), "𝒙ₐ[k+1]") = underbrace(dmat(delim: "[", 𝑨, 𝑨_0), "𝑨ₐ") underbrace(vec(delim: "[", 𝒙_([k]), 𝒙_(d[k])), "𝒙ₐ[k]") + underbrace(vec(delim: "[", 𝑩, 𝟎), "𝑩ₐ") 𝒖
$

进一步有

$ 𝒆_([k]) = 𝑪_a 𝒙_(a[k]) $

对应的代价函数为

$
  J &= 1 / 2 𝒆^(⊤)_([N]) 𝑺 𝒆_([N]) + 1 / 2 ∑_(k=0)^(N-1) (𝒆^(⊤)_([k]) 𝑸 𝒆_([k]) + 𝒖^(⊤)_([k]) 𝑹 𝒖_([k]))\
  &= 1 / 2 (𝑪_a 𝒙_(a[k]))^(⊤)_([N]) 𝑺 (𝑪_a 𝒙_(a[k])) + 1 / 2 ∑_(k=0)^(N-1) (
    (𝑪_a 𝒙_(a[k]))^(⊤)_([k]) 𝑸 (𝑪_a 𝒙_(a[k]))_([k]) + 𝒖^(⊤)_([k]) 𝑹 𝒖_([k])
  )\
  &= 1 / 2 𝒙_(a[k])^(⊤) 𝑺_a 𝒙_(a[k]) + 1 / 2 ∑_(k=0)^(N-1) (𝒙_(a[k])^(⊤) 𝑸_a 𝒙_(a[k]) + 𝒖^(⊤)_([k]) 𝑹 𝒖_([k]))
$ <cost>

上式成功将追踪问题转化为了 LQR 问题。但当$𝑹$过大，则系统将躺平，无法进行追踪。

== 非零常数稳态

考虑特例，如恒温或匀速控制，此时

$ 𝒙_(d[k]) = 𝒙_d $

且$𝒙_d$处，系统处于稳态，即输入$𝒖$使系统总能得到$𝒙_d$。于是

$ 𝒙_d = 𝑨 𝒙_d + 𝑩 𝒖_d $

可得

$ (𝑰 - 𝑨)𝒙_d = 𝑩 𝒖_d $

定义稳态误差

$ δ 𝒖_([k]) = 𝒖_([k]) - 𝒖_([d]) $

代入@sys，可得

$
  𝒙_([k+1]) &= 𝑨 𝒙_([k]) + 𝑩(δ 𝒖_([k]) + 𝒖_([d])) \
  &= 𝑨 𝒙_([k]) + 𝑩 δ 𝒖_([k]) + (𝑰 - 𝑨) 𝒙_d
$

构造增广矩阵

$
  𝒙_(a[
    k+1
  ]) = vec(delim: "[", 𝒙_([k+1]), 𝒙_d) = underbrace(mat(delim: "[", 𝑨, 𝑰 - 𝑨; 𝟎, 𝑰), "𝑨ₐ") vec(delim: "[", 𝒙_([k]), 𝒙_d) + underbrace(vec(delim: "[", 𝑩, 𝟎), "𝑩ₐ") δ 𝒖_([
    k
  ])
$

令

$ 𝒆_([k]) = 𝒙_([k]) - 𝒙_d = underbrace((𝑰 - 𝑨), "𝑪ₐ") underbrace(vec(delim: "[", 𝒙_([k]), 𝒙_d), "𝒙ₐ[k]") $

代入@cost，得

$
  J &= 1 / 2 𝒙^(⊤)_(a[N]) 𝑪^(⊤)_a 𝑺_a 𝑪_a 𝒙_(a[N]) + 1 / 2 ∑_(k=0)^(N-1) (
    𝒙^(⊤)_(a[k]) 𝑪^(⊤)_a 𝑸_a 𝑪_a 𝒙_(a[k]) + δ 𝒖^(⊤)_([k]) 𝑹 δ 𝒖_([k])
  )
$

这就得到了一个新的 LQR 问题。

#figure(
  image("images/block/lqr-tracking.drawio.png", width: 40%),
  caption: "轨迹追踪 LQR 系统",
  supplement: [图],
)

== 非零变化稳态
